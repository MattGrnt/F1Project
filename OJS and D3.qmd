---
title: "OJS and D3"
format: html
editor: visual
---

```{r}
#| echo: false
#| warning: false
library(tidyverse, quietly = TRUE)
Constructors <- read.csv('Constructors2024.csv') %>% 
  select(-X)
```

```{r}
#| echo: false
ojs_define(Constructors = Constructors %>% select(round, standings, team,  colour))
```

```{ojs}
//| echo: false
d3 = require("d3@7")

data = transpose(Constructors)

//groupedData = d3.groups(data, d => d.team)
//groupedData

chart = {
  // define the graph height and width
  const height = 500;
  const width = 750;
  // define the margins
  const margin = ({top: 20, right: 20, bottom: 30, left: 40});
  
  // Set the position of the x axis 
  const x = d3.scaleLinear() // choose a scale
  .domain(d3.extent(data, d => d.round)) // set the domain, d3.extent pulls the min and max, so here we pull the min and max of round from data
  .range([margin.left, width - margin.right]); // set the range, the physical start and end of the axis. We can use the graph size and margins to do this
  
  const y = d3.scaleLinear()
  .domain(d3.extent(data, d => d.standings))
  .range([height-margin.bottom, margin.top]);
  
  // Declare the line generator.
  const line = d3.line()
    .x(d => x(d.round))
    .y(d => y(d.standings));  
  
  //create the svg that will hold the chart
  const svg = d3.create("svg")
    .attr("width", width)
    .attr("height", height)
    .attr("viewBox", [0,0, width, height])
    .attr("style", "max-width: 100%, height: auto; height: intrinsic;"); //some css for the svg
  
  //add the x-axis to the svg  
  svg.append("g") 
    .attr("transform", `translate(0, ${height - margin.bottom})`)
    .call(d3.axisBottom(x).ticks(width/80).tickSizeOuter(0))
    .call(g => g.select(".domain").remove());
  
// Add the y-axis, remove the domain line, add grid lines and a label
  svg.append("g")
      .attr("transform", `translate(${margin.left},0)`)
      .call(d3.axisLeft(y)
        .ticks((y.domain()[1] - y.domain()[0]) / 50))
      .call(g => g.select(".domain").remove())
      .call(g => g.selectAll(".tick line").clone()
      .attr("x2", width - margin.left - margin.right)
      .attr("stroke-opacity", 0.1))
      .call(g => g.append("text")
      .attr("x", -margin.left)
      .attr("y", 10)
      .attr("fill", "currentColor")
      .attr("text-anchor", "start")
      .text("â†‘ Points"));  
  
  const groupedData = d3.groups(data, d => d.team);
 visibility().then(() => {
  // Append a path for the line. Since I have grouped data, this will be done with a for
groupedData.forEach(([team, group]) => {
   const path = svg.append("path")
    .datum(group)
    .attr("fill", "none")
    .attr("stroke", group[0].colour) 
    .attr("stroke-width", 1.5)
    .attr("d", line);

  // Ensure the path is part of the DOM before animating
  const totalLength = path.node().getTotalLength();

  path
    .attr("stroke-dasharray", totalLength)
    .attr("stroke-dashoffset", totalLength)
    .transition() // Start the transition
    .delay(200)
    .duration(10000) // Duration of 1 second
    //.ease(d3.easeCubicInOut) // Smooth easing function
    .attr("stroke-dashoffset", 0); // Reveal the path gradually
  }); 
 });
  
  
  return svg.node();

}
```

```{=html}
```
