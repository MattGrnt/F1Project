[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "F1Project",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "Local Stats.html",
    "href": "Local Stats.html",
    "title": "F1Project",
    "section": "",
    "text": "Praesent ornare dolor turpis, sed tincidunt nisl pretium eget. Curabitur sed iaculis ex, vitae tristique sapien. Quisque nec ex dolor. Quisque ut nisl a libero egestas molestie. Nulla vel porta nulla. Phasellus id pretium arcu. Etiam sed mi pellentesque nibh scelerisque elementum sed at urna. Ut congue molestie nibh, sit amet pretium ligula consectetur eu. Integer consectetur augue justo, at placerat erat posuere at. Ut elementum urna lectus, vitae bibendum neque pulvinar quis. Suspendisse vulputate cursus eros id maximus. Duis pulvinar facilisis massa, et condimentum est viverra congue. Curabitur ornare convallis nisl. Morbi dictum scelerisque turpis quis pellentesque. Etiam lectus risus, luctus lobortis risus ut, rutrum vulputate justo. Nulla facilisi.\nProin sodales neque erat, varius cursus diam tincidunt sit amet. Etiam scelerisque fringilla nisl eu venenatis. Donec sem ipsum, scelerisque ac venenatis quis, hendrerit vel mauris. Praesent semper erat sit amet purus condimentum, sit amet auctor mi feugiat. In hac habitasse platea dictumst. Nunc ac mauris in massa feugiat bibendum id in dui. Praesent accumsan urna at lacinia aliquet. Proin ultricies eu est quis pellentesque. In vel lorem at nisl rhoncus cursus eu quis mi. In eu rutrum ante, quis placerat justo. Etiam euismod nibh nibh, sed elementum nunc imperdiet in. Praesent gravida nunc vel odio lacinia, at tempus nisl placerat. Aenean id ipsum sed est sagittis hendrerit non in tortor.\n\n\n\n\nAcross the UK, there are 650 constituencies, one for each MP. And each MP always wants to know what is going on in their area.\n\n\n\n\nThey aren’t all the same size\n\n\n\n\n\nLet’s look at a single constituency.\n\nThis is Stratford.\n\n\n\n\n\nProin sodales neque erat, varius cursus diam tincidunt sit amet. Etiam scelerisque fringilla nisl eu venenatis. Donec sem ipsum, scelerisque ac venenatis quis, hendrerit vel mauris. Praesent semper erat sit amet purus condimentum, sit amet auctor mi feugiat. In hac habitasse platea dictumst. Nunc ac mauris in massa feugiat bibendum id in dui. Praesent accumsan urna at lacinia aliquet. Proin ultricies eu est quis pellentesque. In vel lorem at nisl rhoncus cursus eu quis mi. In eu rutrum ante, quis placerat justo. Etiam euismod nibh nibh, sed elementum nunc imperdiet in. Praesent gravida nunc vel odio lacinia, at tempus nisl placerat. Aenean id ipsum sed est sagittis hendrerit non in tortor.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMaecenas turpis velit, ultricies non elementum vel, luctus nec nunc. Nulla a diam interdum, faucibus sapien viverra, finibus metus. Donec non tortor diam. In ut elit aliquet, bibendum sem et, aliquam tortor. Donec congue, sem at rhoncus ultrices, nunc augue cursus erat, quis porttitor mauris libero ut ex. Nullam quis leo urna. Donec faucibus ligula eget pellentesque interdum. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean rhoncus interdum erat ut ultricies. Aenean tempus ex non elit suscipit, quis dignissim enim efficitur. Proin laoreet enim massa, vitae laoreet nulla mollis quis.\nVestibulum ultrices, tortor at mattis porta, odio nisi rutrum nulla, sit amet tincidunt eros quam facilisis tellus. Fusce eleifend lectus in elementum lacinia. Nam auctor nunc in massa ullamcorper, sit amet auctor ante accumsan. Nam ut varius metus. Curabitur eget tristique leo. Cras finibus euismod erat eget elementum. Integer vel placerat ex. Ut id eros quis lectus lacinia venenatis hendrerit vel ante."
  },
  {
    "objectID": "Learning OJS.html",
    "href": "Learning OJS.html",
    "title": "Exploring OJS",
    "section": "",
    "text": "Since I’m more comfortable with R, I’ll import and clean the data with R.\nI can then pass the data frame to ojs with ojs_define()\nojs doesn’t use column structured data, but row structured data. To help with this, I’ve only passed a few columns to the ojs variable, and then used transpose() to pivot them into the correct format\nNow I can build a chart with this data.\nI’ve created a color object that lets me control the legend for the graph.\nfirstData = transpose(Constructors2024)\n\n Plot.plot({\n    color: {\n      legend: true,\n      className: \"chart-legend\",\n      domain: transpose(Constructors2024).map(d =&gt; d.team), // List of unique categories\n      range: transpose(Constructors2024).map(d =&gt; d.colour), // Corresponding colors for each category\n      legendPosition: \"top-right\", // Position of the legend\n      rows: 2, // Layout: Arrange the legend into 2 rows\n      columns: 5,\n      swatchWidth: 25,\n    },\n    style: {\n      font: \"14px Poppins\", // Axis labels, title, etc.\n    },\n    x: {\n      domain: [0, 12], // Set the x-axis range\n    },\n    y: {\n      domain: [0, 350], // Set the y-axis range\n    },\n    marks: [\n      Plot.line(firstData, {\n        x: \"round\", // x-axis row\n        y: \"points\", // y-axis row\n        stroke: \"team\", // Use the category for stroke color\n        tip: true, // Enable tooltips\n      }),\n    ],\n  });\nTo style the legend I need to use some CSS:\nNow I want to do the same graph, but draw it while we scroll…\nangleScale2 = d3.scaleLinear()\n  .domain([0, 12.1])\n  .range([0, 12])\n  .clamp(true)\n\nrounds = angleScale2(\n  (crTriggerIndex != null ? crTriggerIndex : -1)\n    + crTriggerProgress)"
  },
  {
    "objectID": "Exploring the data.html",
    "href": "Exploring the data.html",
    "title": "Exploring the F1 data",
    "section": "",
    "text": "library(tidyverse, quietly = TRUE)\n\nWarning: package 'tidyverse' was built under R version 4.3.2\n\n\nWarning: package 'ggplot2' was built under R version 4.3.3\n\n\nWarning: package 'tibble' was built under R version 4.3.2\n\n\nWarning: package 'tidyr' was built under R version 4.3.3\n\n\nWarning: package 'readr' was built under R version 4.3.3\n\n\nWarning: package 'purrr' was built under R version 4.3.2\n\n\nWarning: package 'dplyr' was built under R version 4.3.2\n\n\nWarning: package 'stringr' was built under R version 4.3.2\n\n\nWarning: package 'forcats' was built under R version 4.3.2\n\n\nWarning: package 'lubridate' was built under R version 4.3.2\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(plotly, quietly = TRUE)\n\nWarning: package 'plotly' was built under R version 4.3.3\n\n\n\nAttaching package: 'plotly'\n\nThe following object is masked from 'package:ggplot2':\n\n    last_plot\n\nThe following object is masked from 'package:stats':\n\n    filter\n\nThe following object is masked from 'package:graphics':\n\n    layout\n\nConstructors &lt;- read_csv('data/constructors.csv') \n\nRows: 212 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): constructorRef, name, nationality, url\ndbl (1): constructorId\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nConstructorsResults &lt;- read_csv(file = 'data/constructor_results.csv') %&gt;%\n  left_join(select(Constructors, constructorId, name), by = 'constructorId')\n\nRows: 12505 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): status\ndbl (4): constructorResultsId, raceId, constructorId, points\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nRaces &lt;- read_csv('data/races.csv')\n\nRows: 1125 Columns: 18\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (13): name, time, url, fp1_date, fp1_time, fp2_date, fp2_time, fp3_date...\ndbl   (4): raceId, year, round, circuitId\ndate  (1): date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nConstructorsResults &lt;- left_join(ConstructorsResults, \n                                 Races %&gt;% select(raceId, year, round, name, date), \n                                 by = 'raceId') \nConstructors2024 &lt;- ConstructorsResults %&gt;%\n  filter(year &gt; 2023) %&gt;%\n  select(-c(constructorResultsId,\n            raceId, \n            constructorId,\n            status)) %&gt;%\n  rename(team = name.x,\n         race = name.y) %&gt;%\n  select(round, date, race, team, points, year) %&gt;%\n  arrange(round, desc(points))\n\n\nTeam colours\n\nMclaren_col     &lt;- '#ff8000'\nFerrari_col     &lt;- '#e80020'\nRedBull_col     &lt;- '#3671c6'\nMercedes_col    &lt;- '#27f4d2'\nAstonMartin_col &lt;- '#229971'\nAlpine_col      &lt;- '#ff36a1'\nHaas_col        &lt;- '#ffffff'\nRB_col          &lt;- '#6692ff'\nWilliams_col    &lt;- '#64c4ff'\nKick_col        &lt;- '#00e700'\n\n\n\nResults over the season\n\nConstructors2024 &lt;- Constructors2024 %&gt;%\n  group_by(team) %&gt;%\n  mutate(standings = cumsum(points),\n         colour = case_when(team == 'Red Bull' ~ RedBull_col,\n                            team == 'Ferrari' ~ Ferrari_col,\n                            team == 'Mercedes' ~ Mercedes_col,\n                            team == 'McLaren' ~ Mclaren_col,\n                            team == 'Aston Martin' ~ AstonMartin_col,\n                            team == 'Sauber' ~ Kick_col,\n                            team == 'Haas F1 Team' ~ Haas_col,\n                            team == 'RB F1 Team' ~ RB_col,\n                            team == 'Williams' ~ Williams_col,\n                            team == 'Alpine F1 Team' ~ Alpine_col)) \n\nConstr2024Season &lt;- plot_ly(Constructors2024) \nfor (i in unique(Constructors2024$team)) {\n  team2024 &lt;- Constructors2024 %&gt;%\n    filter(team == i)\n  Constr2024Season &lt;- Constr2024Season %&gt;%\n    add_trace(data = team2024,\n              x = round,\n              y = ~standings,\n              line = list(color = team2024$colour[1]),\n              name = i,\n              type = 'scatter',\n              mode = 'lines'\n              )\n}\nConstr2024Season\n\n\n\n\n# add_trace(x = round, \n#   y = ~standings,\n#   color = ~colour, #variable to split by, can also be color = \n#   #line = list(color = ~), #if you want to set line formatting options\n#   type = 'scatter', \n#   mode = 'lines')"
  },
  {
    "objectID": "Scrolling Globe Example.html",
    "href": "Scrolling Globe Example.html",
    "title": "OJS Variables",
    "section": "",
    "text": "Closeread makes scrolling progress available to users as Observable JavasScript variables, so you can create Closeread sections with interactive graphics that change as you scroll.\nLet’s use this functionality to make a visualization of a globe. Before we start, let’s define some cities that we’ll plot on that globe. Here I’ve done it in OJS, but you could easily make an R or Python data frame available using ojs_define() (or load a CSV from elsewhere):\n\ncities = [\n  { name: \"Brisbane\",  lat: -27.467778, lon: 153.028056 },\n  { name: \"New Delhi\", lat: 28.613889,  lon: 77.208889 },\n  { name: \"Singapore\", lat: 1.283333,   lon: 103.833333 },\n  { name: \"Istanbul\",  lat: 41.013611,  lon: 28.955 },\n  { name: \"Paris\",     lat: 48.856667,  lon: 2.352222 },\n  { name: \"Nairobi\",   lat: -1.286389,  lon: 36.817222 },\n  { name: \"São Paulo\", lat: -23.55,     lon: -46.633333 },\n  { name: \"Montreal\",  lat: 45.508889,  lon: -73.554167 },\n  { name: \"Houston\",   lat: 29.762778,  lon: -95.383056 },\n  { name: \"Vancouver\", lat: 49.260833,  lon: -123.113889 },\n  { name: \"Honolulu\",  lat: 21.306944,  lom: -157.858333 }\n]\n\n\n\n\n\n\nNow let’s load data that describes the shape of the continents.\n\nworld = FileAttachment(\"natural-earth-countries-1_110m@public.geojson\").json()\n\n\n\n\n\n\nThe cities above wrap the entire globe, so to view them all we’ll need to be give the user the ability to spin the globe. We’ll map the progress of the user’s scroll, stored in a variable called crProgressBlock, to a variable called angle. The scale.Linear function handles the linear mapping of crProgressBlock going from 0 to 1 to angle going from -180 to 0.\n\nangleScale1 = d3.scaleLinear()\n  .domain([0, 1])\n  .range([-180, 0])\n  .clamp(true)\n    \nangle1 = angleScale1(crProgressBlock)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTo see the OJS code that actually creates the globe, look into the source of this document. Here is the result:\n\n\n\n\n\nThis interactive globe visualization starts at an angle of 0 - the International Date Line.\n\n\n\n\nIt ends at an angle of 0: the prime median.\n\n\n\n\n\n\n\n\nPlot.plot({\n  marks: [\n    Plot.graticule(),\n    Plot.geo(world, {\n      fill: \"#222222\"\n    }),\n    Plot.sphere(),\n    Plot.dot(cities, {\n      x: \"lon\",\n      y: \"lat\",\n      fill: \"#eb343d\",\n      stroke: \"white\",\n      strokeWidth: 5,\n      paintOrder: \"stroke\",\n      size: 6\n    }),\n    Plot.text(cities, {\n      x: d =&gt; d.lon + 2,\n      y: d =&gt; d.lat + 2,\n      text: \"name\",\n      fill: \"#eb343d\",\n      stroke: \"white\",\n      strokeWidth: 5,\n      paintOrder: \"stroke\",\n      fontSize: 18,\n      textAnchor: \"start\"\n    }),\n  ],\n  projection: {\n    type: \"orthographic\",\n    rotate: [angle1, -10]\n  }\n})\n\n\n\n\n\n\n\n\n\n\n\n\nmd`Active sticky: ${crActiveSticky}`\n\n\n\n\n\n\n\nmd`Active trigger: ${crTriggerIndex}`\n\n\n\n\n\n\n\nmd`Trigger progress: ${(crTriggerProgress * 100).toFixed(1)}%`\n\n\n\n\n\n\n\nmd`Scroll direction: ${crDirection}`\n\n\n\n\n\n\n\nmd`Progress Block progress: ${(crProgressBlock * 100).toFixed(1)}%`\n\n\n\n\n\n\n\nmd`-----`\n\n\n\n\n\n\n\nmd`(derived) Angle 1: ${angle1.toFixed(1)}°`\n\n\n\n\n\n\n\nmd`(derived) Angle 2: ${angle2.toFixed(1)}°`\n\n\n\n\n\n\n\n\n\nAs you back and forth over this Closeread section, note the values of the OJS variables that Closeread makes available in OJS code cells:\n\ncrTriggerIndex is a number representing the index of the currently visible trigger (starting from 0 and going down through the document).\ncrTriggerProgress is a number between 0 and 1 representing how far the currently active trigger has progressed through the visible window.\ncrDirection is either \"up\" or \"down\", depending on the direction the user last scrolled.\ncrActiveSticky is the name of the currently visible sticky.\ncrProgressBlock is a number between 0 and 1 representing how far the currently active progress block has progressed through the visible window (more on progress blocks in Interactive Graphics).\n\nTo demonstrate the use of other OJS variables, we’ll recreate the spinning behavior by a more creative mapping of crTriggerIndex and crTriggerProgress to form angle2. [This second globe demonstrates some interesting behavior: angle2 was actually changing as a result of the two triggers used in making the first globe. ]\n\n\n\n\nWe want our globe to rotate with the scroll progress — between -180 and 180.\n\n\n\n\nInstead of trying to do the maths to scale it ourselves, we can make a scale with d3.\n\n\n\n\nThere are six narrative blocks that we want to scale over, but I’d like the scrolling to start a little late and end a little early — by the time the last block has just started.\n\n\n\n\nSo between 2.5 (because the scroll starts with the third trigger of the document) and 7.1. If the numbers go outside this range, we’ll clamp them so that the scrolling doesn’t continue.\n\n\n\n\nHere’s how we create that scale and then use it with Closeread’s variables, crTriggerIndex and crScrollProgress:\n\nangleScale2 = d3.scaleLinear()\n  .domain([2.5, 7.1])\n  .range([-180, 180])\n  .clamp(true)\n\nangle2 = angleScale2(\n  (crTriggerIndex != null ? crTriggerIndex : -1)\n    + crTriggerProgress)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWith all that done, we can see our map!\n\n\n\n\n\n\n\nPlot.plot({\n  marks: [\n    Plot.graticule(),\n    Plot.geo(world, {\n      fill: \"#222222\"\n    }),\n    Plot.sphere(),\n    Plot.dot(cities, {\n      x: \"lon\",\n      y: \"lat\",\n      fill: \"#eb343d\",\n      stroke: \"white\",\n      strokeWidth: 5,\n      paintOrder: \"stroke\",\n      size: 6\n    }),\n    Plot.text(cities, {\n      x: d =&gt; d.lon + 2,\n      y: d =&gt; d.lat + 2,\n      text: \"name\",\n      fill: \"#eb343d\",\n      stroke: \"white\",\n      strokeWidth: 5,\n      paintOrder: \"stroke\",\n      fontSize: 18,\n      textAnchor: \"start\"\n    }),\n  ],\n  projection: {\n    type: \"orthographic\",\n    rotate: [angle2, -10]\n  }\n})\n\n\n\n\n\n\n\n\n\n\nSometimes it can be worth closing your story with some additional text to give the scrollytelling section some room to breathe. So here’s some nonsense!\n\nEu in culpa officia cupidatat nostrud laborum do consequat officia Lorem tempor consectetur pariatur sunt. Veniam culpa dolore laborum nostrud ipsum pariatur ipsum dolore consectetur commodo ex. Non culpa deserunt voluptate. Amet excepteur incididunt deserunt pariatur velit labore do sunt occaecat eiusmod. Tempor proident sint exercitation culpa incididunt sunt proident sunt reprehenderit. Sint ipsum qui id nisi quis officia in. Anim velit minim fugiat qui dolor enim occaecat amet excepteur do aliqua ex adipisicing laboris labore.\nCulpa aute sint aliquip in aute enim cillum in exercitation cupidatat ex cupidatat mollit dolore ut. Et culpa minim laborum in ipsum laborum velit laboris fugiat ad culpa cillum. Sit nulla eu minim in nulla. Nulla esse sint occaecat eiusmod in irure in dolor veniam pariatur laboris consectetur sunt laboris excepteur. Dolor dolore ad incididunt consequat. Ad elit ullamco veniam cillum reprehenderit pariatur pariatur nisi ea. Pariatur quis ut deserunt eiusmod ipsum magna ullamco."
  },
  {
    "objectID": "Learning OJS.html#round-0",
    "href": "Learning OJS.html#round-0",
    "title": "Exploring OJS",
    "section": "Round 0",
    "text": "Round 0\nAfter a dominant 2023 season from Red Bull, everyone hoped for a change in the pecking order."
  },
  {
    "objectID": "Learning OJS.html#round-1",
    "href": "Learning OJS.html#round-1",
    "title": "Exploring OJS",
    "section": "Round 1",
    "text": "Round 1\nThe Bahrain Grand Prix didn’t look like a promising start…\n\n\n\n\n\n\n\n\n\nteam\npoints\nstandings\n\n\n\n\n1\nRed Bull\n+ 44\n44\n\n\n2\nFerrari\n+ 27\n27\n\n\n3\nMercedes\n+ 16\n16\n\n\n4\nMcLaren\n+ 12\n12\n\n\n5\nAston Martin\n+ 3\n3\n\n\n6\nSauber\n+ 0\n0\n\n\n7\nHaas F1 Team\n+ 0\n0\n\n\n8\nRB F1 Team\n+ 0\n0\n\n\n9\nWilliams\n+ 0\n0\n\n\n10\nAlpine F1 Team\n+ 0\n0"
  },
  {
    "objectID": "Learning OJS.html#round-1---bahrain-grand-prix",
    "href": "Learning OJS.html#round-1---bahrain-grand-prix",
    "title": "Exploring OJS",
    "section": "Round 1 - Bahrain Grand Prix",
    "text": "Round 1 - Bahrain Grand Prix\nThe Bahrain Grand Prix didn’t look like a promising start…\n\n\n\n\n\n\n\nteam\npoints\nstandings\n\n\n\n\n1\nRed Bull\n+ 44\n44\n\n\n2\nFerrari\n+ 27\n27\n\n\n3\nMercedes\n+ 16\n16\n\n\n4\nMcLaren\n+ 12\n12\n\n\n5\nAston Martin\n+ 3\n3\n\n\n6\nSauber\n+ 0\n0\n\n\n7\nHaas F1 Team\n+ 0\n0\n\n\n8\nRB F1 Team\n+ 0\n0\n\n\n9\nWilliams\n+ 0\n0\n\n\n10\nAlpine F1 Team\n+ 0\n0"
  },
  {
    "objectID": "Learning OJS.html#round-3---australian-grand-prix",
    "href": "Learning OJS.html#round-3---australian-grand-prix",
    "title": "Exploring OJS",
    "section": "Round 3 - Australian Grand Prix",
    "text": "Round 3 - Australian Grand Prix\nAfter qualifying on pole, Verstappen looked likely to take a record-equalling 10th victory in a row.\nHowever, car problems lead to a surprise retirement on lap 5, opening the door to a 1-2 finish from Ferrari.\n\n\n\n\n\n\n\nteam\npoints\nstandings\n\n\n\n\n1\nFerrari\n+ 44\n93\n\n\n2\nMcLaren\n+ 27\n55\n\n\n3\nAston Martin\n+ 12\n25\n\n\n4\nRed Bull\n+ 10\n97\n\n\n5\nRB F1 Team\n+ 6\n6\n\n\n6\nHaas F1 Team\n+ 3\n4\n\n\n7\nWilliams\n+ 0\n0\n\n\n8\nAlpine F1 Team\n+ 0\n0\n\n\n9\nSauber\n+ 0\n0\n\n\n10\nMercedes\n+ 0\n26"
  },
  {
    "objectID": "Animated D3 Graphs.html",
    "href": "Animated D3 Graphs.html",
    "title": "Animated D3 Graphs",
    "section": "",
    "text": "astronauts = FileAttachment(\"astronauts.json\").json()\n\nimport {addAnimation} from \"@mkfreeman/plot-animation\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ndata = transpose(Constructors2024)\n\n// Animate this plot\n// (awaiting visibility on the page)\nviewof replay = Inputs.button(\"Replay\");\n\nvisibility().then(() =&gt;\n  addAnimation(\n    Plot.line(data, { \n      x: \"round\", \n      y: \"points\", \n      stroke: \"team\", \n      strokeOpacity: 0.2// Initial opacity set to 0 (completely transparent)\n    }).plot({\n      color: {\n        domain: transpose(Constructors2024).map(d =&gt; d.team), // List of unique categories\n        range: transpose(Constructors2024).map(d =&gt; d.colour) // Corresponding colors\n      }\n    }),\n    { \n      type: \"path\",       // Correct attribute for opacity\n      attribute: \"stroke-opacity\",\n      delay: 200,\n      replay              // Replay button for the animation\n    }\n  )\n);"
  },
  {
    "objectID": "OJS and D3.html",
    "href": "OJS and D3.html",
    "title": "OJS and D3",
    "section": "",
    "text": "d3 = require(\"d3@7\")\n\ndata = transpose(Constructors)\n\n//groupedData = d3.groups(data, d =&gt; d.team)\n//groupedData\n\nchart = {\n  // define the graph height and width\n  const height = 500;\n  const width = 750;\n  // define the margins\n  const margin = ({top: 20, right: 20, bottom: 30, left: 40});\n  \n  // Set the position of the x axis \n  const x = d3.scaleLinear() // choose a scale\n  .domain(d3.extent(data, d =&gt; d.round)) // set the domain, d3.extent pulls the min and max, so here we pull the min and max of round from data\n  .range([margin.left, width - margin.right]); // set the range, the physical start and end of the axis. We can use the graph size and margins to do this\n  \n  const y = d3.scaleLinear()\n  .domain(d3.extent(data, d =&gt; d.standings))\n  .range([height-margin.bottom, margin.top]);\n  \n  // Declare the line generator.\n  const line = d3.line()\n    .x(d =&gt; x(d.round))\n    .y(d =&gt; y(d.standings));  \n  \n  //create the svg that will hold the chart\n  const svg = d3.create(\"svg\")\n    .attr(\"width\", width)\n    .attr(\"height\", height)\n    .attr(\"viewBox\", [0,0, width, height])\n    .attr(\"style\", \"max-width: 100%, height: auto; height: intrinsic;\"); //some css for the svg\n  \n  //add the x-axis to the svg  \n  svg.append(\"g\") \n    .attr(\"transform\", `translate(0, ${height - margin.bottom})`)\n    .call(d3.axisBottom(x).ticks(width/80).tickSizeOuter(0))\n    .call(g =&gt; g.select(\".domain\").remove());\n  \n// Add the y-axis, remove the domain line, add grid lines and a label\n  svg.append(\"g\")\n      .attr(\"transform\", `translate(${margin.left},0)`)\n      .call(d3.axisLeft(y)\n        .ticks((y.domain()[1] - y.domain()[0]) / 50))\n      .call(g =&gt; g.select(\".domain\").remove())\n      .call(g =&gt; g.selectAll(\".tick line\").clone()\n      .attr(\"x2\", width - margin.left - margin.right)\n      .attr(\"stroke-opacity\", 0.1))\n      .call(g =&gt; g.append(\"text\")\n      .attr(\"x\", -margin.left)\n      .attr(\"y\", 10)\n      .attr(\"fill\", \"currentColor\")\n      .attr(\"text-anchor\", \"start\")\n      .text(\"↑ Points\"));  \n  \n  const groupedData = d3.groups(data, d =&gt; d.team);\n visibility().then(() =&gt; {\n  // Append a path for the line. Since I have grouped data, this will be done with a for\ngroupedData.forEach(([team, group]) =&gt; {\n   const path = svg.append(\"path\")\n    .datum(group)\n    .attr(\"fill\", \"none\")\n    .attr(\"stroke\", group[0].colour) \n    .attr(\"stroke-width\", 1.5)\n    .attr(\"d\", line);\n\n  // Ensure the path is part of the DOM before animating\n  const totalLength = path.node().getTotalLength();\n\n  path\n    .attr(\"stroke-dasharray\", totalLength)\n    .attr(\"stroke-dashoffset\", totalLength)\n    .transition() // Start the transition\n    .delay(200)\n    .duration(10000) // Duration of 1 second\n    //.ease(d3.easeCubicInOut) // Smooth easing function\n    .attr(\"stroke-dashoffset\", 0); // Reveal the path gradually\n  }); \n });\n  \n  \n  return svg.node();\n\n}"
  },
  {
    "objectID": "Scrolling Constructrs Season.html",
    "href": "Scrolling Constructrs Season.html",
    "title": "Exploring OJS",
    "section": "",
    "text": "Since I’m more comfortable with R, I’ll import and clean the data with R.\nI can then pass the data frame to ojs with ojs_define()"
  },
  {
    "objectID": "Scrolling Constructrs Season.html#round-0",
    "href": "Scrolling Constructrs Season.html#round-0",
    "title": "Exploring OJS",
    "section": "Round 0",
    "text": "Round 0\nAfter a dominant 2023 season from Red Bull, everyone hoped for a change in the pecking order."
  },
  {
    "objectID": "Scrolling Constructrs Season.html#round-1---bahrain-grand-prix",
    "href": "Scrolling Constructrs Season.html#round-1---bahrain-grand-prix",
    "title": "Exploring OJS",
    "section": "Round 1 - Bahrain Grand Prix",
    "text": "Round 1 - Bahrain Grand Prix\nThe Bahrain Grand Prix didn’t look like a promising start…\n\n\n\n\n\n\n\nteam\npoints\nstandings\n\n\n\n\n1\nRed Bull\n+ 44\n44\n\n\n2\nFerrari\n+ 27\n27\n\n\n3\nMercedes\n+ 16\n16\n\n\n4\nMcLaren\n+ 12\n12\n\n\n5\nAston Martin\n+ 3\n3\n\n\n6\nSauber\n+ 0\n0\n\n\n7\nHaas F1 Team\n+ 0\n0\n\n\n8\nRB F1 Team\n+ 0\n0\n\n\n9\nWilliams\n+ 0\n0\n\n\n10\nAlpine F1 Team\n+ 0\n0"
  },
  {
    "objectID": "Scrolling Constructrs Season.html#round-3---australian-grand-prix",
    "href": "Scrolling Constructrs Season.html#round-3---australian-grand-prix",
    "title": "Exploring OJS",
    "section": "Round 3 - Australian Grand Prix",
    "text": "Round 3 - Australian Grand Prix\nAfter qualifying on pole, Verstappen looked likely to take a record-equalling 10th victory in a row.\nHowever, car problems lead to a surprise retirement on lap 5, opening the door to a 1-2 finish from Ferrari.\n\n\n\n\n\n\n\nteam\npoints\nstandings\n\n\n\n\n1\nFerrari\n+ 44\n93\n\n\n2\nMcLaren\n+ 27\n55\n\n\n3\nAston Martin\n+ 12\n25\n\n\n4\nRed Bull\n+ 10\n97\n\n\n5\nRB F1 Team\n+ 6\n6\n\n\n6\nHaas F1 Team\n+ 3\n4\n\n\n7\nWilliams\n+ 0\n0\n\n\n8\nAlpine F1 Team\n+ 0\n0\n\n\n9\nSauber\n+ 0\n0\n\n\n10\nMercedes\n+ 0\n26"
  }
]